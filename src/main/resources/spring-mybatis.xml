<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!--扫描器，扫描各组件，扫描后的类通过getBean(xxx.class)获取，无需在配置文件配置bean-->
    <context:component-scan base-package="com.freedom"></context:component-scan>

    <!--配置加载数据源所需的参数文件-->
    <context:property-placeholder location="classpath:db.properties" />

    <!--配置数据源，使用druid数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置sqlSessionFactoryBean-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--注入mapper映射文件，mapper文件夹下的所有.xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <!--别名-->
        <property name="typeAliasesPackage" value="com.freedom.pojo"></property>
    </bean>


    <!--配置mapper接口扫描器-->
    <!--所有mapper被扫描可以通过getBean("mapper类名小写")获得mapper的实现类对象或者getBean(xxxmapper.class)获得-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--配置mapper文件所在的包-->
        <property name="basePackage" value="com.freedom.mapper"></property>
        <!--注入sessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
    </bean>


    <!--配置事务管理器-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>


    <!-- 6、注解配置事务扩散机制 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
    <!-- 6、xml配置事务扩散(传播)机制 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes >
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>


    <aop:config>
        <!--配置切点-->
        <aop:pointcut expression="execution(* com.freedom.service.*.*.*(..))" id="serviceCutPoint"/>
        <!--定义通知器-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceCutPoint"/>
    </aop:config>
    <!--强制使用cglib代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>




